// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P6_Binot_Jonathan.Data;

#nullable disable

namespace P6_Binot_Jonathan.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240908171847_CorrectionIDProduitSysteme")]
    partial class CorrectionIDProduitSysteme
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.Problemes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateResolution")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProduitSysteme")
                        .HasColumnType("int");

                    b.Property<int>("IdStatut")
                        .HasColumnType("int");

                    b.Property<string>("Probleme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdProduitSysteme");

                    b.HasIndex("IdStatut");

                    b.ToTable("Problemes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreation = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 6,
                            IdStatut = 1,
                            Probleme = "L'application ne parvient pas à se connecter au serveur de trading en raison d'un certificat SSL non reconnu, le certificat a expiré et n’a pas été mis à jour.",
                            Resolution = "Le certificat a été renouvelé et la date d’échéance reportée pour couvrir la date en cours. Afin d'éviter que ce problème ne se reproduise, prévoir une maintenance périodique pour mettre à jour le certificat SSL."
                        },
                        new
                        {
                            Id = 2,
                            DateCreation = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 5,
                            IdStatut = 1,
                            Probleme = "Les taux de change des devises ne se mettent pas à jour en temps réel.",
                            Resolution = "Révision de l'API de mise à jour des taux de change pour garantir la synchronisation en temps réel et ajout de fonctionnalités de mise en cache pour améliorer la performance."
                        },
                        new
                        {
                            Id = 3,
                            DateCreation = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 15,
                            IdStatut = 1,
                            Probleme = "Les utilisateurs ne peuvent pas ajouter des actions à leur liste de favoris.",
                            Resolution = "Correction d'un bug dans la logique d'ajout aux favoris et mise à jour de l'interface utilisateur pour une meilleure expérience utilisateur."
                        },
                        new
                        {
                            Id = 4,
                            DateCreation = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 9,
                            IdStatut = 2,
                            Probleme = "L'application se bloque lors de la tentative de consultation de l'historique des transactions."
                        },
                        new
                        {
                            Id = 5,
                            DateCreation = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 17,
                            IdStatut = 1,
                            Probleme = "Les graphiques des performances des investissements ne s'affichent pas correctement, les données sont mal alignées.",
                            Resolution = "Correction d'un bug dans la génération des graphiques et optimisation du rendu pour une meilleure précision des données affichées."
                        },
                        new
                        {
                            Id = 6,
                            DateCreation = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 21,
                            IdStatut = 2,
                            Probleme = "Problème de démarrage de l'application sur la dernière version de MacOS."
                        },
                        new
                        {
                            Id = 7,
                            DateCreation = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 30,
                            IdStatut = 2,
                            Probleme = "Erreur de connexion à la base de données sur certains appareils Android 12."
                        },
                        new
                        {
                            Id = 8,
                            DateCreation = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 38,
                            IdStatut = 2,
                            Probleme = "Fonctionnalité de recherche ne renvoyant pas de résultats."
                        },
                        new
                        {
                            Id = 9,
                            DateCreation = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 33,
                            IdStatut = 1,
                            Probleme = "Crash de l'application lors de l'ouverture d'un fichier volumineux.",
                            Resolution = "Amélioration de la gestion de la mémoire pour permettre l'ouverture de fichiers volumineux."
                        },
                        new
                        {
                            Id = 10,
                            DateCreation = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 44,
                            IdStatut = 2,
                            Probleme = "Problème d'affichage des caractères spéciaux dans l'interface utilisateur."
                        },
                        new
                        {
                            Id = 11,
                            DateCreation = new DateTime(2024, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 29,
                            IdStatut = 1,
                            Probleme = "Erreur d'importation de données à partir d'un fichier CSV.",
                            Resolution = "Correction du parser CSV pour gérer correctement les délimiteurs et les caractères spéciaux."
                        },
                        new
                        {
                            Id = 12,
                            DateCreation = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 41,
                            IdStatut = 2,
                            Probleme = "Notification d'erreur non claire lors de la saisie de données invalides."
                        },
                        new
                        {
                            Id = 13,
                            DateCreation = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 21,
                            IdStatut = 1,
                            Probleme = "Problème de synchronisation des données entre l'application mobile et l'application de bureau.",
                            Resolution = "Amélioration de l'algorithme de synchronisation et correction des conflits de données."
                        },
                        new
                        {
                            Id = 14,
                            DateCreation = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 15,
                            IdStatut = 2,
                            Probleme = "Bug d'affichage des graphiques sur la version iOS 14."
                        },
                        new
                        {
                            Id = 15,
                            DateCreation = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 31,
                            IdStatut = 1,
                            Probleme = "Les rappels de séance d'entraînement ne fonctionnent pas de manière cohérente.",
                            Resolution = "Correction du module de rappels et ajout de tests pour vérifier leur fiabilité."
                        },
                        new
                        {
                            Id = 16,
                            DateCreation = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 39,
                            IdStatut = 2,
                            Probleme = "Problèmes de performances lors du chargement des statistiques d'anxiété."
                        },
                        new
                        {
                            Id = 17,
                            DateCreation = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 21,
                            IdStatut = 1,
                            Probleme = "Erreur lors de la génération des rapports hebdomadaires.",
                            Resolution = "Correction de la logique de génération de rapports et mise à jour des dépendances."
                        },
                        new
                        {
                            Id = 18,
                            DateCreation = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 36,
                            IdStatut = 2,
                            Probleme = "Synchronisation défectueuse avec l'application Apple Health."
                        },
                        new
                        {
                            Id = 19,
                            DateCreation = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 41,
                            IdStatut = 1,
                            Probleme = "Les utilisateurs ne reçoivent pas les notifications de suivi des activités.",
                            Resolution = "Mise à jour du module de notifications et ajout de tests pour vérifier leur bon fonctionnement."
                        },
                        new
                        {
                            Id = 20,
                            DateCreation = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 22,
                            IdStatut = 2,
                            Probleme = "La fonction de calcul des rendements annuels ne donne pas les résultats attendus."
                        },
                        new
                        {
                            Id = 21,
                            DateCreation = new DateTime(2024, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 34,
                            IdStatut = 1,
                            Probleme = "Les utilisateurs ne peuvent pas ajouter des séances d'entraînement personnalisées.",
                            Resolution = "Correction de la logique de sauvegarde des séances personnalisées et mise à jour de l'interface utilisateur pour améliorer l'expérience."
                        },
                        new
                        {
                            Id = 22,
                            DateCreation = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 38,
                            IdStatut = 2,
                            Probleme = "Crash de l'application lors de la tentative d'ajout d'une nouvelle activité."
                        },
                        new
                        {
                            Id = 23,
                            DateCreation = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 19,
                            IdStatut = 2,
                            Probleme = "L'application ne se met pas à jour automatiquement malgré l'activation de l'option."
                        },
                        new
                        {
                            Id = 24,
                            DateCreation = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 24,
                            IdStatut = 2,
                            Probleme = "Les rapports financiers exportés en PDF sont corrompus et illisibles."
                        },
                        new
                        {
                            Id = 25,
                            DateCreation = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 42,
                            IdStatut = 1,
                            Probleme = "Les utilisateurs rencontrent des délais importants lors de la mise à jour des activités.",
                            Resolution = "Optimisation du code de mise à jour pour améliorer les performances et réduire les délais."
                        },
                        new
                        {
                            Id = 26,
                            DateCreation = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateResolution = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProduitSysteme = 27,
                            IdStatut = 1,
                            Probleme = "L'application ne sauvegarde pas les séances d'entraînement correctement sur certaines distributions Linux.",
                            Resolution = "Correction de la logique de gestion des fichiers de sauvegarde et ajout de tests de compatibilité pour différentes distributions Linux."
                        });
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Produits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "Trader en Herbe"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "Maître des Investissements"
                        },
                        new
                        {
                            Id = 3,
                            Nom = "Planificateur d’Entraînement"
                        },
                        new
                        {
                            Id = 4,
                            Nom = "Planificateur d’Anxiété Sociale"
                        });
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.ProduitSysteme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProduitVersion")
                        .HasColumnType("int");

                    b.Property<int>("IdSysteme")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProduitVersion");

                    b.HasIndex("IdSysteme");

                    b.ToTable("ProduitSystemes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdProduitVersion = 1,
                            IdSysteme = 1
                        },
                        new
                        {
                            Id = 2,
                            IdProduitVersion = 1,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 3,
                            IdProduitVersion = 2,
                            IdSysteme = 1
                        },
                        new
                        {
                            Id = 4,
                            IdProduitVersion = 2,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 5,
                            IdProduitVersion = 2,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 6,
                            IdProduitVersion = 3,
                            IdSysteme = 1
                        },
                        new
                        {
                            Id = 7,
                            IdProduitVersion = 3,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 8,
                            IdProduitVersion = 3,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 9,
                            IdProduitVersion = 3,
                            IdSysteme = 4
                        },
                        new
                        {
                            Id = 10,
                            IdProduitVersion = 3,
                            IdSysteme = 5
                        },
                        new
                        {
                            Id = 11,
                            IdProduitVersion = 3,
                            IdSysteme = 6
                        },
                        new
                        {
                            Id = 12,
                            IdProduitVersion = 4,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 13,
                            IdProduitVersion = 4,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 14,
                            IdProduitVersion = 4,
                            IdSysteme = 4
                        },
                        new
                        {
                            Id = 15,
                            IdProduitVersion = 4,
                            IdSysteme = 5
                        },
                        new
                        {
                            Id = 16,
                            IdProduitVersion = 5,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 17,
                            IdProduitVersion = 5,
                            IdSysteme = 5
                        },
                        new
                        {
                            Id = 18,
                            IdProduitVersion = 6,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 19,
                            IdProduitVersion = 6,
                            IdSysteme = 4
                        },
                        new
                        {
                            Id = 20,
                            IdProduitVersion = 6,
                            IdSysteme = 5
                        },
                        new
                        {
                            Id = 21,
                            IdProduitVersion = 7,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 22,
                            IdProduitVersion = 7,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 23,
                            IdProduitVersion = 7,
                            IdSysteme = 4
                        },
                        new
                        {
                            Id = 24,
                            IdProduitVersion = 7,
                            IdSysteme = 5
                        },
                        new
                        {
                            Id = 25,
                            IdProduitVersion = 8,
                            IdSysteme = 1
                        },
                        new
                        {
                            Id = 26,
                            IdProduitVersion = 8,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 27,
                            IdProduitVersion = 9,
                            IdSysteme = 1
                        },
                        new
                        {
                            Id = 28,
                            IdProduitVersion = 9,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 29,
                            IdProduitVersion = 9,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 30,
                            IdProduitVersion = 9,
                            IdSysteme = 4
                        },
                        new
                        {
                            Id = 31,
                            IdProduitVersion = 9,
                            IdSysteme = 5
                        },
                        new
                        {
                            Id = 32,
                            IdProduitVersion = 9,
                            IdSysteme = 6
                        },
                        new
                        {
                            Id = 33,
                            IdProduitVersion = 10,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 34,
                            IdProduitVersion = 10,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 35,
                            IdProduitVersion = 10,
                            IdSysteme = 4
                        },
                        new
                        {
                            Id = 36,
                            IdProduitVersion = 10,
                            IdSysteme = 5
                        },
                        new
                        {
                            Id = 37,
                            IdProduitVersion = 11,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 38,
                            IdProduitVersion = 11,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 39,
                            IdProduitVersion = 11,
                            IdSysteme = 4
                        },
                        new
                        {
                            Id = 40,
                            IdProduitVersion = 11,
                            IdSysteme = 5
                        },
                        new
                        {
                            Id = 41,
                            IdProduitVersion = 12,
                            IdSysteme = 2
                        },
                        new
                        {
                            Id = 42,
                            IdProduitVersion = 12,
                            IdSysteme = 3
                        },
                        new
                        {
                            Id = 43,
                            IdProduitVersion = 12,
                            IdSysteme = 4
                        },
                        new
                        {
                            Id = 44,
                            IdProduitVersion = 12,
                            IdSysteme = 5
                        });
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.ProduitVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProduit")
                        .HasColumnType("int");

                    b.Property<int>("IdVersion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProduit");

                    b.HasIndex("IdVersion");

                    b.ToTable("ProduitVersions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdProduit = 1,
                            IdVersion = 1
                        },
                        new
                        {
                            Id = 2,
                            IdProduit = 1,
                            IdVersion = 2
                        },
                        new
                        {
                            Id = 3,
                            IdProduit = 1,
                            IdVersion = 3
                        },
                        new
                        {
                            Id = 4,
                            IdProduit = 1,
                            IdVersion = 4
                        },
                        new
                        {
                            Id = 5,
                            IdProduit = 2,
                            IdVersion = 1
                        },
                        new
                        {
                            Id = 6,
                            IdProduit = 2,
                            IdVersion = 5
                        },
                        new
                        {
                            Id = 7,
                            IdProduit = 2,
                            IdVersion = 6
                        },
                        new
                        {
                            Id = 8,
                            IdProduit = 3,
                            IdVersion = 1
                        },
                        new
                        {
                            Id = 9,
                            IdProduit = 3,
                            IdVersion = 2
                        },
                        new
                        {
                            Id = 10,
                            IdProduit = 3,
                            IdVersion = 5
                        },
                        new
                        {
                            Id = 11,
                            IdProduit = 4,
                            IdVersion = 1
                        },
                        new
                        {
                            Id = 12,
                            IdProduit = 4,
                            IdVersion = 2
                        });
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.Statut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "Résolu"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "En cours"
                        });
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.Systeme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Systemes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "Linux"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "MacOS"
                        },
                        new
                        {
                            Id = 3,
                            Nom = "Windows"
                        },
                        new
                        {
                            Id = 4,
                            Nom = "Android"
                        },
                        new
                        {
                            Id = 5,
                            Nom = "iOS"
                        },
                        new
                        {
                            Id = 6,
                            Nom = "Windows Mobile"
                        });
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Versions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "1.0"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "1.1"
                        },
                        new
                        {
                            Id = 3,
                            Nom = "1.2"
                        },
                        new
                        {
                            Id = 4,
                            Nom = "1.3"
                        },
                        new
                        {
                            Id = 5,
                            Nom = "2.0"
                        },
                        new
                        {
                            Id = 6,
                            Nom = "2.1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.Problemes", b =>
                {
                    b.HasOne("P6_Binot_Jonathan.Data.ProduitSysteme", "ProduitSysteme")
                        .WithMany()
                        .HasForeignKey("IdProduitSysteme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P6_Binot_Jonathan.Data.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("IdStatut")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProduitSysteme");

                    b.Navigation("Statut");
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.ProduitSysteme", b =>
                {
                    b.HasOne("P6_Binot_Jonathan.Data.ProduitVersion", "ProduitVersion")
                        .WithMany()
                        .HasForeignKey("IdProduitVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P6_Binot_Jonathan.Data.Systeme", "Systeme")
                        .WithMany()
                        .HasForeignKey("IdSysteme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProduitVersion");

                    b.Navigation("Systeme");
                });

            modelBuilder.Entity("P6_Binot_Jonathan.Data.ProduitVersion", b =>
                {
                    b.HasOne("P6_Binot_Jonathan.Data.Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("IdProduit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P6_Binot_Jonathan.Data.Version", "Version")
                        .WithMany()
                        .HasForeignKey("IdVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");

                    b.Navigation("Version");
                });
#pragma warning restore 612, 618
        }
    }
}
